#lang racket
(require "racket_1.rkt")
(require "racket_2.rkt")

'("Tests for length of list")
(define list_1 (list 1 (list 2 3) 3 5 3))
(list_len list_1)
(define empty_list (list ))
(list_len empty_list)

'("Tests for linear search")
(index-of 1 list_1)
(index-of '(2 3) list_1)
(index-of 3 empty_list)
(index-of 5 list_1)
(index-of 16 '(1 4 9))

'("Tests for subset function")
(my-subset? '() '())
(my-subset? '() '(1 2))
(my-subset? '(2 1 1) '(1 2))
(my-subset? '(2 1 3) '(1 2))
(my-subset? '(a d (3 1)) '(1 a (3 d)))
(my-subset? '((1) (2 2)) '((3 3 3) a (2 2) (1)))

'("Tests for set equality")
(same-set? '(1 2 3) '(3 1 2))
(same-set? '(1 2 3 3) '(2 3 1 1 1 2))
(same-set? '(1 2 3 3) '(2 1 1 1 2))
(same-set? '(3 1) '(1 2 4 3))

'("Tests for pairing two lists")
(pairs '(a b c) '(1 2 3))
(pairs '(a b c) '(1 2))
(pairs '(a b) '(1 2 3))

'("Tests for remove duplicates")
(my-remove-duplicates '(1 2 3 2))
(my-remove-duplicates '(4 4 4))
(my-remove-duplicates '(up up and a way way))

'("Tests for finding multiples")
(find-multiples '(a b c))
(find-multiples '(a b a c))
(find-multiples '(a b a c c a))           
(find-multiples '(a b a c c b))

'("Tests for find maximum in a list")
(maximum sum '((1 2 0 0 2) (9) (2 8 2 -2)))
(maximum length '((1 2 0 0 2) (9) (2 8 2 -2)))
(maximum last '((1 2 0 0 2) (9) (2 8 2 -2)))
(maximum string-length '("one" "two" "three" "four" "five"))

'("Tests for calculating consed-out lists")
(make-consed '())
(make-consed '(a b c))
(make-consed '((a) b c))
(make-consed '(4 (a ())))


'(tests for is-digit?)
(is-digit? #\4)
(is-digit? #\9)
(is-digit? #\0)
(is-digit? 4)
(is-digit? "4")
(is-digit? '(cheese shoes string))
(andmap is-digit? (string->list "0123456789"))

'(tests for is-letter?)
(is-letter? #\m)
(is-letter? #\a)
(is-letter? #\Z)
(is-letter? #\Q)
(is-letter? 's)
(is-letter? "T")
(is-letter? '(cheese shoes string))
(andmap is-letter? (string->list "OnceUponAtime"))


'(tests for is-vble?)
(is-vble? 'x)
(is-vble? 'flag)
(is-vble? '4tune)
(is-vble? 'c34)
(is-vble? 'f)
(is-vble? 'f3)
(is-vble? `big-val)
(is-vble? `BigVal)
(is-vble? "flag")
(is-vble? '(cheese shoes string))

'(tests for is-bool-env?)
(is-bool-env? '())
(is-bool-env? '((p t) (p f) (q f) (r f)))
(is-bool-env? '((p t) (q f) (r f)))
(is-bool-env? '((p t) (4q f) (r f)))
(is-bool-env? '((f t) (p f) (q f) (r f)))
(is-bool-env? '(cheese shoes string))
(is-bool-env? 73)

'(tests for is-expr?)
(is-expr? 't)
(is-expr? '(t or (not f)))
(is-expr? '((p and (p --> f)) --> q))
(is-expr? '(cheese shoes string))
(is-expr? '(a and d))
(is-expr? '((c and a) --> (d or c)))
(is-expr? '(not (c --> d)))
(is-expr? '(x or (not d)))

'(tests for eval-prop)
(eval-prop 'f '((a t) (b f) (c f) (d t) (a f)))
(eval-prop 'a '((a t) (b f) (c f) (d t) (a f)))
(eval-prop 'c '((a t) (b f) (c f) (d t) (a f)))
;(eval-prop 'x '((a t) (b f) (c f) (d t) (a f)))        ;error test
(eval-prop '(t and t) '((a t) (b f) (c f) (d t) (a f)))
(eval-prop '(a and d) '((a t) (b f) (c f) (d t) (a f)))
(eval-prop '(not (c --> d)) '((a t) (b f) (c f) (d t) (a f)))
(eval-prop '((c and a) --> (d or c)) '((a t) (b f) (c f) (d t) (a f)))
(eval-prop '(a or (not d)) '((a t) (b f) (c f) (d t) (a f)))
;(eval-prop '(x or (not d)) '((a t) (b f) (c f) (d t) (a f)))        ;error test
;(eval-prop '(d or (not y)) '((a t) (b f) (c f) (d t) (a f)))        ;error test

'(tests for get-vbles)
(get-vbles '((p or (not q)) --> (not p)))
(get-vbles '((p or (r and q)) --> (p or r)))
(get-vbles '((f or (not t)) --> (not p)))
(get-vbles 'r)
(get-vbles 't)

'(tests for all-truth-values)
(all-truth-values 0)
(all-truth-values 1)
(all-truth-values 2)
(all-truth-values 3)

'(tests for find-sat-env)
(find-sat-env 't)
(find-sat-env 'f)
(find-sat-env 'p)
(find-sat-env '(f or (t --> f)))
(find-sat-env '(a or (b --> a)))
(find-sat-env '((p or q) --> p))
(find-sat-env '(p and (not p)))